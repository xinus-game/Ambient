#
# The ember section describes all ember metadata.
#
[ember]
# This must be a snake-cased name.
id = "my_cool_ember"
# This name is human-readable and can contain anything.
name = "My Cool Ember"
# This description is human-readable and can contain anything.
description = "A sample ember that's the coolest thing ever."
# Embers are expected to use (major, minor, patch) semantic versioning.
# Other formats are not accepted. This requirement may be relaxed later.
version = "0.0.1"

#
# Build settings.
#
[build]
# Rust-specific settings.
[build.rust]
# `cargo build` will be run with each of these features to produce a separate WASM binary,
# which is then componentized and copied into a folder of the corresponding name in `build/`.
# This is used to build the same code for both client and server.
# Client and server are built by default; this is exposed so that you can disable building one
# side entirely if required.
# You will normally not need to touch this.
feature-multibuild = ["client", "server"]

#
# Custom components defined by this ember.
# Components are used to store data on entities.
#
[components]
# Inline tables can be used.
cool_component = { type = "I32", name = "Cool Component", description = "A cool component", attributes = ["Debuggable"] }
# Explicit tables can also be used.
[components.cool_component2]
# At time of writing, supported component types are:
#   Empty, Bool, String,
#   EntityId,
#   F32, F64, Mat4, Quat,
#   U8, U16, U32, U64,
#   I8, I16, I32, I64,
#   Vec2, Vec3, Vec4,
#   Uvec2, Uvec3, Uvec4,
#   Ivec2, Ivec3, Ivec4
# or
#   { type = "Vec", element_type = "TypeFromAbove" }
#   { type = "Option", element_type = "TypeFromAbove" }
# You cannot nest container types.
type = "I32"
name = "Cool Component 2"
description = "A cool component 2"
# At time of writing, supported attributes are:
#   Debuggable: this component can have its debug value printed, especially in ECS dumps
#   Networked: this component is networked
#   Resource: this component will only ever be used as a resource; will error if attached to an entity
#   MaybeResource: this component can be used as a resource or as a component; necessary if treating this component as a resource
#   Store: this component's value should be persisted when the world is saved
attributes = ["Debuggable"]
# Namespaces are also supported:
"cool::component" = { type = "I32", name = "Cool Component", description = "A cool component", attributes = ["Debuggable"] }

#
# Custom concepts defined by this ember.
# Concepts are used to define a set of components that can be attached to an entity.
#
[concepts]
[concepts.concept1]
# The name of the concept.
name = "Concept 1"
# The description of the concept.
description = "The best"
[concepts.transformable.components]
# Each component needs to be specified with a default value.
# At time of writing, you can only use components defined in this ember manifest.
cool_component = 0

# A concept that extends `concept1` and has both `cool_component` and `cool_component2`.
[concepts.concept2]
name = "Concept 2"
description = "The successor"
# At time of writing, all concepts being extended must be defined in this ember manifest.
extends = ["concept1"]
[concepts.concept2.components]
cool_component2 = 1

#
# Custom messages defined by this ember.
# Messages are used to communicate between client and server.
#
[messages]
[messages.input]
# The name of the message.
name = "Input"
# The description of the message.
description = "Describes the input state of the player."
[messages.input.fields]
# Each field in the message must have a type, name and description. The supported types are the same as for components.
direction = { type = "Vec2", name = "Direction", description = "The movement direction of the player." }
mouse_delta_x = { type = "F32", name = "Mouse delta X", description = "The mouse delta X." }